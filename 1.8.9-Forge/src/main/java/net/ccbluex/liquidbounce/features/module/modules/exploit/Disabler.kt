/*
 * LiquidBounce+ Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/WYSI-Foundation/LiquidBouncePlus/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.*
import io.netty.buffer.Unpooled
import net.minecraft.network.Packet
import net.minecraft.network.PacketBuffer
import net.minecraft.util.BlockPos

import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import java.io.IOException

@ModuleInfo(name = "Disabler", description = "Disable some anticheats' checks.", category = ModuleCategory.EXPLOIT)
class Disabler : Module() {

	private val modeValue = ListValue("Mode", 
		arrayOf(
			"Basic",
			"Verus-Combat", 
			"Old-Matrix", 
			"Kauri", 
			"Riding-Spoof", 
			"Area51", 
			"Spartan-Combat", 
			"Old-Ghostly",
			"Spectate-Spoof",
			"Spectate",
			"Test", "Test2"
		), "Basic")

	private val debugValue = BoolValue("Debug", false)
	private val specNoGround = BoolValue("SpecSpoof-NoGround", false)

	private val keepAlives = arrayListOf<C00PacketKeepAlive>()
	private val transactions = arrayListOf<C0FPacketConfirmTransaction>()
	private val msTimer = MSTimer()

	override fun onEnable() {
		keepAlives.clear()
		transactions.clear()
		msTimer.reset()
	}

	override fun onDisable() {
		// make sure to send all missing packets so the anticheat won't be angry
		keepAlives.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}
		transactions.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}
		keepAlives.clear()
		transactions.clear()
		msTimer.reset()
	}

	@EventTarget
	fun onPacket(event: PacketEvent) {
		when (modeValue.get()) {
			"Verus-Combat" -> if (event.packet is C0FPacketConfirmTransaction || event.packet is C0BPacketEntityAction) event.cancelEvent()
			"Old-Matrix" -> if (event.packet is C03PacketPlayer && mc.thePlayer.ticksExisted % 15 == 0) {
				try {
					val b = ByteArrayOutputStream()
	                val _out = DataOutputStream(b)
	                _out.writeUTF(mc.thePlayer.gameProfile.getName())
	                val buf = PacketBuffer(Unpooled.buffer())
	                buf.writeBytes(b.toByteArray())
	                mc.netHandler.addToSendQueue(C17PacketCustomPayload("matrix:geyser", buf))
				} catch (e: IOException) {

				}
			}
			"Kauri" -> if (event.packet is C0FPacketConfirmTransaction) event.cancelEvent()
			"Riding-Spoof" -> if (event.packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak))
			"Basic" -> if (event.packet is C0FPacketConfirmTransaction || event.packet is C00PacketKeepAlive) event.cancelEvent()
			"Old-Ghostly" -> {
				if (event.packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput())
				if (event.packet is C0FPacketConfirmTransaction || event.packet is C00PacketKeepAlive) event.cancelEvent()
			}
			"Spartan-Combat" -> {
				var packet = event.packet
        		if (packet is C00PacketKeepAlive && (keepAlives.size <= 0 || packet != keepAlives.get(keepAlives.size - 1))) {
            		keepAlives.add(packet)
            		event.cancelEvent()
        		}
        		if (packet is C0FPacketConfirmTransaction && (transactions.size <= 0 || packet != transactions.get(transactions.size - 1))) {
            		transactions.add(packet)
            		event.cancelEvent()
        		}
			}
			"Spectate-Spoof" -> {
				if (event.packet is C03PacketPlayer) {
					val c03 = event.packet as C03PacketPlayer
					if (specNoGround.get()) c03.onGround = false

					val capabilities = PlayerCapabilities()
					capabilities.disableDamage = true
					capabilities.isFlying = true
					capabilities.allowFlying = true
					capabilities.isCreativeMode = false

					mc.netHandler.addToSendQueue(C13PacketPlayerAbilities(capabilities))
					mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
				}
			}
			"Spectate" -> {
				if (event.packet is C03PacketPlayer)
					mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
			}
			"Test" -> {
				val packet = event.packet
				if (packet is C03PacketPlayer) {
					val capabilities = mc.thePlayer.capabilities
					capabilities.setPlayerWalkSpeed(Float.NEGATIVE_INFINITY)
					capabilities.setFlySpeed(Float.NEGATIVE_INFINITY)

					mc.netHandler.addToSendQueue(C13PacketPlayerAbilities(capabilities))
				}
			}
			"Test2" -> {
				val packet = event.packet
				if (packet is C03PacketPlayer) {
					packet.onGround = false

					mc.netHandler.addToSendQueue(C13PacketPlayerAbilities(mc.thePlayer.capabilities))
					mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
				}

				if (packet is S32PacketConfirmTransaction)
					event.cancelEvent()

				if (packet is C0FPacketConfirmTransaction) {
					if (debugValue.get()) ClientUtils.displayChatMessage("c0f ${packet.uid} ${packet.windowId}")
					transactions.add(packet)
					event.cancelEvent()
				}
			}
		}
	}

	@EventTarget
	fun onWorld(event: WorldEvent) {
		transactions.clear()
		keepAlives.clear()
		msTimer.reset()
	}

	@EventTarget
	fun onUpdate(event: UpdateEvent) {
		if (modeValue.get().equals("area51", true)) mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(BlockPos(Double.NaN, Double.NaN, Double.NaN), 1, null, 0F, 0F, 0F))
		if (modeValue.get().equals("spartan-combat", true) && keepAlives.size > 0 && transactions.size > 0) {
			if (msTimer.hasTimePassed(3000L)) {
				PacketUtils.sendPacketNoEvent(keepAlives.get(keepAlives.size - 1))
				PacketUtils.sendPacketNoEvent(transactions.get(transactions.size - 1))
				keepAlives.clear()
				transactions.clear()
				msTimer.reset()
			}
		}
		if (modeValue.get().equals("test2", true) && mc.thePlayer.ticksExisted % 100 == 0) {
			if (!transactions.isEmpty()) {
				transactions.forEach {
					PacketUtils.sendPacketNoEvent(it)
					if (debugValue.get()) ClientUtils.displayChatMessage("${it.uid} sent with WID ${it.windowId}")
				}
				transactions.clear()
			}
		}
	}
}