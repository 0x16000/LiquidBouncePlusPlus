/*
 * LiquidBounce+ Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/WYSI-Foundation/LiquidBouncePlus/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.module.modules.movement.Speed
import net.ccbluex.liquidbounce.features.module.modules.movement.LongJump
import net.ccbluex.liquidbounce.features.module.modules.exploit.helper.PacketThread
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.MovementUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.network.handshake.client.C00Handshake
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.*
import io.netty.buffer.Unpooled
import net.minecraft.network.Packet
import net.minecraft.network.PacketBuffer
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing

import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import java.io.IOException
import java.util.LinkedList

import kotlin.math.sqrt
import kotlin.math.round

@ModuleInfo(name = "Disabler", description = "Disable some anticheats' checks.", category = ModuleCategory.EXPLOIT)
class Disabler : Module() {

	private val modeValue = ListValue("Mode", 
		arrayOf(
			"Basic",
			"SpartanCombat", 
			"OldMatrix", 
			"OldGhostly",
			"Kauri", 
			"Riding", 
			"Spectate",
			"OldVerus", // Dort
			"OldHypixel", // Someone named LX sent me this mode in Discord. Very appreciate his support. (It's actually someone else code that I won't say here)
			"Verus",
			"Verus2",
			"FakeLag"
		), "Basic")

	private val minRand: IntegerValue = object : IntegerValue("FakeLag-MinDelay", 1500, 0, 20000) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            val v = maxRand.get()
            if (v < newValue) set(v)
        }
    }
    private val maxRand: IntegerValue = object : IntegerValue("FakeLag-MaxDelay", 1500, 0, 20000) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            val v = minRand.get()
            if (v > newValue) set(v)
        }
    }

	private val debugValue = BoolValue("Debug", false)

	private val keepAlives = arrayListOf<C00PacketKeepAlive>()
	private val transactions = arrayListOf<C0FPacketConfirmTransaction>()
	private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()
	private val anotherQueue = LinkedList<C00PacketKeepAlive>()

	private val packetBus = hashMapOf<Long, Packet<INetHandlerPlayServer>>()
	
	private val msTimer = MSTimer()

	private var dState = 0
	private var sendYModify = false

	fun debug(s: String) = ClientUtils.displayChatMessage("§7[§3§lDisabler§7]§f $s")

	override fun onEnable() {
		keepAlives.clear()
		transactions.clear()
		packetQueue.clear()
		anotherQueue.clear()
		packetBus.clear()

		msTimer.reset()
		dState = 0
		sendYModify = false
	}

	override fun onDisable() {
		keepAlives.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}
		transactions.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}

		keepAlives.clear()
		transactions.clear()
		packetQueue.clear()
		anotherQueue.clear()
		packetBus.clear()

		msTimer.reset()

		mc.thePlayer.motionY = 0.0
		MovementUtils.strafe(0F)
		mc.timer.timerSpeed = 1F
	}

	@EventTarget
	fun onPacket(event: PacketEvent) {
		val packet = event.packet
	
		when (modeValue.get().toLowerCase()) {
			"oldmatrix" -> if (packet is C03PacketPlayer && mc.thePlayer.ticksExisted % 15 == 0) {
				try {
					val b = ByteArrayOutputStream()
	                val _out = DataOutputStream(b)
	                _out.writeUTF(mc.thePlayer.gameProfile.getName())
	                val buf = PacketBuffer(Unpooled.buffer())
	                buf.writeBytes(b.toByteArray())
	                mc.netHandler.addToSendQueue(C17PacketCustomPayload("matrix:geyser", buf))
				} catch (e: IOException) {

				}
			}
			"kauri" -> if (packet is C0FPacketConfirmTransaction) event.cancelEvent()
			"riding" -> if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak))
			"basic" -> if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) event.cancelEvent()
			"oldghostly" -> {
				if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput())
				if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) event.cancelEvent()
			}
			"spartancombat" -> {
        		if (packet is C00PacketKeepAlive && (keepAlives.size <= 0 || packet != keepAlives[keepAlives.size - 1])) {
            		keepAlives.add(packet)
            		event.cancelEvent()
        		}
        		if (packet is C0FPacketConfirmTransaction && (transactions.size <= 0 || packet != transactions[transactions.size - 1])) {
            		transactions.add(packet)
            		event.cancelEvent()
        		}
			}
			"spectate" -> if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
			"oldverus" -> {
				/*if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0)
					packetQueue.clear()

					not really necessary since the clear implementation was added below
				*/

				if (packet is C03PacketPlayer) {
					val yPos = round(mc.thePlayer.posY / 0.015625) * 0.015625
					mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)

					if (mc.thePlayer.ticksExisted % 45 == 0) {
						PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
            			PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false))
            			PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
					}
				}

				if (packet is S08PacketPlayerPosLook) {
					if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

					var x = packet.getX() - mc.thePlayer.posX
      				var y = packet.getY() - mc.thePlayer.posY
      				var z = packet.getZ() - mc.thePlayer.posZ
      				var diff = sqrt(x * x + y * y + z * z)
      				if (diff <= 8) {
        				event.cancelEvent()
        				PacketUtils.sendPacketNoEvent(C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true))
      				}
				}

				if (packet is C0FPacketConfirmTransaction) {
					repeat (4) {
						packetQueue.add(packet)
					}
					event.cancelEvent()
				}
			}
			"oldhypixel" -> {
				if (packet is C0FPacketConfirmTransaction)
				{
					repeat (4) {
						transactions.add(packet)
					}
					event.cancelEvent()
					if (debugValue.get()) debug("Duped 4 times into packet lists a transaction packet.")
				}

				if (mc.thePlayer.ticksExisted > 100) {
					if (transactions.size > 30) {
						transactions.forEach { PacketUtils.sendPacketNoEvent(it) }
						transactions.clear()
						if (debugValue.get()) debug("Flushed transactions queue.")
						if (dState == 0) dState++
					}
				} else if (mc.thePlayer == null || mc.thePlayer.ticksExisted < 100) {
					transactions.clear()
					dState = 0
				}

				if (dState == 1) {
					LiquidBounce.hud.addNotification(Notification("You may be able to use some features now.", Notification.Type.SUCCESS, 5000L))
					dState++
				}
			}
			"verus" -> {
				if (packet is C0FPacketConfirmTransaction) {
					event.cancelEvent()
					PacketThread(packet, RandomUtils.nextInt(1800, 2200).toLong(), true).start()
				}
				
				if (packet is C00PacketKeepAlive) {
					event.cancelEvent()
					packet.key -= RandomUtils.nextInt(100, 1000)
					PacketThread(packet, RandomUtils.nextInt(1100, 2000).toLong(), true).start()
				}

				if (packet is C03PacketPlayer) {
					val capabilities = PlayerCapabilities()
					capabilities.isCreativeMode = true
					capabilities.isFlying = packet.onGround
					capabilities.allowFlying = true
					PacketUtils.sendPacketNoEvent(C13PacketPlayerAbilities(capabilities))
					PacketUtils.sendPacketNoEvent(C0CPacketInput())
				}
			}
			"verus2" -> {
				if (packet is C0FPacketConfirmTransaction) {
					repeat (2) {
						packetQueue.add(packet)
					}
					event.cancelEvent()
				}
				if (packet is C00PacketKeepAlive) {
					repeat (4) {
						anotherQueue.add(packet)
					}
					event.cancelEvent()
				}
				if (packet is C03PacketPlayer) {
					if (mc.thePlayer.ticksExisted % 120 == 0) {
						PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(packet.x, packet.y, packet.z, true))
						PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(packet.x, packet.y - 11.727 * Math.random(), packet.z, false))
						PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(packet.x, packet.y, packet.z, true))
						if (debugValue.get()) debug("jew")
					}

					val capabilities = PlayerCapabilities()
					capabilities.isCreativeMode = true
					capabilities.isFlying = packet.onGround
					capabilities.allowFlying = true
					PacketUtils.sendPacketNoEvent(C13PacketPlayerAbilities(capabilities))
					PacketUtils.sendPacketNoEvent(C0CPacketInput())
				}
			}
			"fakelag" -> {
				if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) {
					packetBus.put((System.currentTimeMillis() + RandomUtils.nextInt(minRand.get(), maxRand.get())).toLong(), packet)
					if (debugValue.get()) debug("taken a c0f or c00 packet into the bus")
				}
			}
		}
	}

	@EventTarget
	fun onMotion(event: MotionEvent) {
		val speed = LiquidBounce.moduleManager.getModule(Speed::class.java)!!
		val lj = LiquidBounce.moduleManager.getModule(LongJump::class.java)!!
		if (modeValue.get().equals("oldhypixel", true) && event.onGround && (speed.state || lj.state)) {
			if (!sendYModify) {
				event.y += .004 * Math.random()
				if (debugValue.get()) debug("Sent Y offset.")
				sendYModify = true
			}
		} else
			sendYModify = false
	}

	@EventTarget
	fun onWorld(event: WorldEvent) {
		transactions.clear()
		keepAlives.clear()
		packetQueue.clear()
		anotherQueue.clear()
		packetBus.clear()

		msTimer.reset()
		dState = 0
	}

	@EventTarget
	fun onUpdate(event: UpdateEvent) {
		when (modeValue.get().toLowerCase()) {
			"spartancombat" -> {
				if (msTimer.hasTimePassed(3000L) && keepAlives.size > 0 && transactions.size > 0) {
					PacketUtils.sendPacketNoEvent(keepAlives[keepAlives.size - 1])
					PacketUtils.sendPacketNoEvent(transactions[transactions.size - 1])
					keepAlives.clear()
					transactions.clear()
					msTimer.reset()
				}
			}
			"oldverus" -> {
				if (mc.thePlayer.ticksExisted % 180 == 0) {
      				while (packetQueue.size > 22) {
        				PacketUtils.sendPacketNoEvent(packetQueue.poll())
      				}
    			}
			}
			"verus2" -> {
				if (mc.thePlayer.ticksExisted % 120 == 0) {
					while (packetQueue.size > 0 || anotherQueue.size > 0) {
						try {
							if (!packetQueue.isEmpty()) PacketUtils.sendPacketNoEvent(packetQueue.poll())
							if (!anotherQueue.isEmpty()) PacketUtils.sendPacketNoEvent(anotherQueue.poll())
						} catch (e: Exception) {

						}
					}
				}
			}
			"fakelag" -> {
				try {
					val iter = packetBus.keys.iterator()
					while (iter.hasNext()) {
						val time = iter.next()
						val packet = packetBus[time]
						if (System.currentTimeMillis() <= time) {
							if (tbpsSilent.get())
								PacketUtils.sendPacketNoEvent(packet)
							else
								mc.netHandler.addToSendQueue(packet)
							if (debugValue.get()) debug("weeeeee")
							iter.remove()
						}
					}
				} catch (e: Exception) {
					// ignore
				}
			}
		}
	}
}