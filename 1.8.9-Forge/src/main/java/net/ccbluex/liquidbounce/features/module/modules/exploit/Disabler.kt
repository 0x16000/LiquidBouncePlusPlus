/*
 * LiquidBounce+ Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/WYSI-Foundation/LiquidBouncePlus/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.MovementUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.network.handshake.client.C00Handshake
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.*
import io.netty.buffer.Unpooled
import net.minecraft.network.Packet
import net.minecraft.network.PacketBuffer
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing

import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import java.io.IOException
import java.util.LinkedList

import kotlin.math.sqrt
import kotlin.math.round

@ModuleInfo(name = "Disabler", description = "Disable some anticheats' checks.", category = ModuleCategory.EXPLOIT)
class Disabler : Module() {

	private val modeValue = ListValue("Mode", 
		arrayOf(
			"Basic",
			"VerusCombatOld", 
			"SpartanCombat", 
			"OldMatrix", 
			"OldGhostly",
			"Kauri", 
			"RidingSpoof", 
			"Spectate",
			"NullPlace",
			"LatestVerus" // dort's disabler
		), "Basic")

	private val keepAlives = arrayListOf<C00PacketKeepAlive>()
	private val transactions = arrayListOf<C0FPacketConfirmTransaction>()
	private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()
	
	private val msTimer = MSTimer()

	override fun onEnable() {
		keepAlives.clear()
		transactions.clear()
		packetQueue.clear()

		msTimer.reset()
	}

	override fun onDisable() {
		// make sure to send all missing packets so the anticheat won't be angry
		keepAlives.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}
		transactions.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}

		keepAlives.clear()
		transactions.clear()
		packetQueue.clear()

		msTimer.reset()

		mc.thePlayer.motionY = 0.0
		MovementUtils.strafe(0F)
		mc.timer.timerSpeed = 1F
	}

	@EventTarget
	fun onPacket(event: PacketEvent) {
		val packet = event.packet
	
		when (modeValue.get()) {
			"VerusCombatOld" -> if (packet is C0FPacketConfirmTransaction || packet is C0BPacketEntityAction) event.cancelEvent()
			"OldMatrix" -> if (packet is C03PacketPlayer && mc.thePlayer.ticksExisted % 15 == 0) {
				try {
					val b = ByteArrayOutputStream()
	                val _out = DataOutputStream(b)
	                _out.writeUTF(mc.thePlayer.gameProfile.getName())
	                val buf = PacketBuffer(Unpooled.buffer())
	                buf.writeBytes(b.toByteArray())
	                mc.netHandler.addToSendQueue(C17PacketCustomPayload("matrix:geyser", buf))
				} catch (e: IOException) {

				}
			}
			"Kauri" -> if (packet is C0FPacketConfirmTransaction) event.cancelEvent()
			"RidingSpoof" -> if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak))
			"Basic" -> if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) event.cancelEvent()
			"OldGhostly" -> {
				if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput())
				if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) event.cancelEvent()
			}
			"SpartanCombat" -> {
        		if (packet is C00PacketKeepAlive && (keepAlives.size <= 0 || packet != keepAlives[keepAlives.size - 1])) {
            		keepAlives.add(packet)
            		event.cancelEvent()
        		}
        		if (packet is C0FPacketConfirmTransaction && (transactions.size <= 0 || packet != transactions[transactions.size - 1])) {
            		transactions.add(packet)
            		event.cancelEvent()
        		}
			}
			"Spectate" -> {
				if (packet is C03PacketPlayer)
					mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
			}
			"LatestVerus" -> {
				/*if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0)
					packetQueue.clear()

					not really necessary since the clear implemention was added below
				*/

				if (packet is C03PacketPlayer) {
					val yPos = round(mc.thePlayer.posY / 0.015625) * 0.015625
					mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)

					if (mc.thePlayer.ticksExisted % 45 == 0) {
						PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
            			PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false))
            			PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
					}
				}

				if (packet is S08PacketPlayerPosLook) {
					if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

					var x = packet.getX() - mc.thePlayer.posX
      				var y = packet.getY() - mc.thePlayer.posY
      				var z = packet.getZ() - mc.thePlayer.posZ
      				var diff = sqrt(x * x + y * y + z * z)
      				if (diff <= 8) {
        				event.cancelEvent()
        				PacketUtils.sendPacketNoEvent(C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true))
      				}
				}

				if (packet is C0FPacketConfirmTransaction) {
					repeat (4) {
						packetQueue.add(packet)
					}
					event.cancelEvent()
				}
			}
		}
	}

	@EventTarget
	fun onWorld(event: WorldEvent) {
		transactions.clear()
		keepAlives.clear()
		packetQueue.clear()

		msTimer.reset()
	}

	@EventTarget
	fun onUpdate(event: UpdateEvent) {
		when (modeValue.get().toLowerCase()) {
			"nullplace" -> {
				PacketUtils.sendPacketNoEvent(C08PacketPlayerBlockPlacement(
									BlockPos(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY,
											Double.POSITIVE_INFINITY),
									Integer.MAX_VALUE, null, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY,
									Float.POSITIVE_INFINITY))
				PacketUtils.sendPacketNoEvent(C08PacketPlayerBlockPlacement(
									BlockPos(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY,
											Double.NEGATIVE_INFINITY),
									Integer.MAX_VALUE, null, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY,
									Float.NEGATIVE_INFINITY))
				PacketUtils.sendPacketNoEvent(C08PacketPlayerBlockPlacement(
							BlockPos(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ), 0, null, 0F, 0F, 0F))
			}
			"spartancombat" -> {
				if (msTimer.hasTimePassed(3000L) && keepAlives.size > 0 && transactions.size > 0) {
					PacketUtils.sendPacketNoEvent(keepAlives[keepAlives.size - 1])
					PacketUtils.sendPacketNoEvent(transactions[transactions.size - 1])
					keepAlives.clear()
					transactions.clear()
					msTimer.reset()
				}
			}
			"latestverus" -> {
				if (mc.thePlayer.ticksExisted % 180 == 0) {
      				while (packetQueue.size > 22) {
        				PacketUtils.sendPacketNoEvent(packetQueue.poll())
      				}
    			}
			}
		}
	}
}