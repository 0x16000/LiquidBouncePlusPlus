/*
 * LiquidBounce+ Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/WYSI-Foundation/LiquidBouncePlus/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.MovementUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.network.handshake.client.C00Handshake
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.*
import io.netty.buffer.Unpooled
import net.minecraft.network.Packet
import net.minecraft.network.PacketBuffer
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing

import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import java.io.IOException

@ModuleInfo(name = "Disabler", description = "Disable some anticheats' checks.", category = ModuleCategory.EXPLOIT)
class Disabler : Module() {

	private val modeValue = ListValue("Mode", 
		arrayOf(
			"Basic",
			"VerusCombatOld", 
			"OldMatrix", 
			"Kauri", 
			"RidingSpoof", 
			"SpartanCombat", 
			"OldGhostly",
			"Spectate",
			"NullPlace",
			"C13+InfiniteC0C",
			"InfiniteYPos",
			"NegativeInfiniteYPos",
			"NaNYPos",
			"NoPingNoTransaction",
			"NCPDamage",
			"Offset"
		), "Basic")

	private val keepAlives = arrayListOf<C00PacketKeepAlive>()
	private val transactions = arrayListOf<C0FPacketConfirmTransaction>()
	
	private val msTimer = MSTimer()

	override fun onEnable() {
		keepAlives.clear()
		transactions.clear()

		msTimer.reset()

		if (mc.thePlayer == null) return
		if (modeValue.get().equals("ncpdamage", true)) {
			for (i in 0..9) {
				PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,
						mc.thePlayer.posY + 0.300001, mc.thePlayer.posZ, false))
				PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,
						mc.thePlayer.posY, mc.thePlayer.posZ, false))
			}
			PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
		}

		mc.thePlayer.ticksExisted = 0
	}

	override fun onDisable() {
		// make sure to send all missing packets so the anticheat won't be angry
		keepAlives.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}
		transactions.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}

		keepAlives.clear()
		transactions.clear()

		msTimer.reset()

		mc.thePlayer.motionY = 0.0
		MovementUtils.strafe(0F)
		mc.timer.timerSpeed = 1F
	}

	@EventTarget
	fun onPacket(event: PacketEvent) {
		val packet = event.packet
	
		when (modeValue.get()) {
			"VerusCombatOld" -> if (packet is C0FPacketConfirmTransaction || packet is C0BPacketEntityAction) event.cancelEvent()
			"OldMatrix" -> if (packet is C03PacketPlayer && mc.thePlayer.ticksExisted % 15 == 0) {
				try {
					val b = ByteArrayOutputStream()
	                val _out = DataOutputStream(b)
	                _out.writeUTF(mc.thePlayer.gameProfile.getName())
	                val buf = PacketBuffer(Unpooled.buffer())
	                buf.writeBytes(b.toByteArray())
	                mc.netHandler.addToSendQueue(C17PacketCustomPayload("matrix:geyser", buf))
				} catch (e: IOException) {

				}
			}
			"Kauri" -> if (packet is C0FPacketConfirmTransaction) event.cancelEvent()
			"RidingSpoof" -> if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak))
			"Basic" -> if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) event.cancelEvent()
			"OldGhostly" -> {
				if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput())
				if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) event.cancelEvent()
			}
			"SpartanCombat" -> {
        		if (packet is C00PacketKeepAlive && (keepAlives.size <= 0 || packet != keepAlives[keepAlives.size - 1])) {
            		keepAlives.add(packet)
            		event.cancelEvent()
        		}
        		if (packet is C0FPacketConfirmTransaction && (transactions.size <= 0 || packet != transactions[transactions.size - 1])) {
            		transactions.add(packet)
            		event.cancelEvent()
        		}
			}
			"Spectate" -> {
				if (packet is C03PacketPlayer)
					mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
			}
			"InfiniteYPos" -> {
				if (packet is C03PacketPlayer)
					packet.y = Double.POSITIVE_INFINITY
			}
			"NegativeInfiniteYPos" -> {
				if (packet is C03PacketPlayer)
					packet.y = Double.NEGATIVE_INFINITY
			}
			"NaNYPos" -> {
				if (packet is C03PacketPlayer)
					packet.y = Double.NaN
			}
			"NoPingNoTransaction" -> {
				if (packet is C00PacketKeepAlive || packet is S00PacketKeepAlive
					|| packet is C0FPacketConfirmTransaction || packet is S32PacketConfirmTransaction)
					event.cancelEvent()
			}
			"Offset" -> {
				if (packet is C03PacketPlayer) {
					if (mc.thePlayer.ticksExisted < 20 && mc.thePlayer.ticksExisted % 2 == 0) {
						PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 21.0, mc.thePlayer.posZ, true))
					}
				}
			}
		}
	}

	@EventTarget
	fun onWorld(event: WorldEvent) {
		transactions.clear()
		keepAlives.clear()

		msTimer.reset()
	}

	@EventTarget
	fun onUpdate(event: UpdateEvent) {
		if (modeValue.get().equals("nullplace", true)) {
			PacketUtils.sendPacketNoEvent(C08PacketPlayerBlockPlacement(
								BlockPos(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY,
										Double.POSITIVE_INFINITY),
								Integer.MAX_VALUE, null, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY,
								Float.POSITIVE_INFINITY))
			PacketUtils.sendPacketNoEvent(C08PacketPlayerBlockPlacement(
								BlockPos(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY,
										Double.NEGATIVE_INFINITY),
								Integer.MAX_VALUE, null, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY,
								Float.NEGATIVE_INFINITY))
			PacketUtils.sendPacketNoEvent(C08PacketPlayerBlockPlacement(
						BlockPos(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ), 0, null, 0F, 0F, 0F))
		}
		if (modeValue.get().equals("spartancombat", true) && keepAlives.size > 0 && transactions.size > 0) {
			if (msTimer.hasTimePassed(3000L)) {
				PacketUtils.sendPacketNoEvent(keepAlives[keepAlives.size - 1])
				PacketUtils.sendPacketNoEvent(transactions[transactions.size - 1])
				keepAlives.clear()
				transactions.clear()
				msTimer.reset()
			}
		}
		if (modeValue.get().equals("c13+infinitec0c", true)) {
			PacketUtils.sendPacketNoEvent(C13PacketPlayerAbilities(mc.thePlayer.capabilities));
			PacketUtils.sendPacketNoEvent(C0CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, false, false));
		}
	}
}