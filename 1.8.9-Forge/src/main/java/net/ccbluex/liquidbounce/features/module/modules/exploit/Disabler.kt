package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.network.play.client.*
import io.netty.buffer.Unpooled
import net.minecraft.network.Packet
import net.minecraft.network.PacketBuffer
import net.minecraft.util.BlockPos

import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import java.io.IOException

@ModuleInfo(name = "Disabler", description = "Disable some anticheats' checks.", category = ModuleCategory.EXPLOIT)
class Disabler : Module() {

	private val modeValue = ListValue("Mode", 
		arrayOf(
			"Basic",
			"Verus-Combat", 
			"Old-Matrix", 
			"Kauri", 
			"Riding-Spoof", 
			"Area51", 
			"Spartan-Combat", 
			"Old-Ghostly",
			":trole:"
		), "Basic")

	private val keepAlives = arrayListOf<C00PacketKeepAlive>()
	private val transactions = arrayListOf<C0FPacketConfirmTransaction>()
	private val msTimer = MSTimer()

	override fun onEnable() {
		keepAlives.clear()
		transactions.clear()
		msTimer.reset()
	}

	@EventTarget
	fun onPacket(event: PacketEvent) {
		when (modeValue.get()) {
			"Verus-Combat" -> if (event.packet is C0FPacketConfirmTransaction || event.packet is C0BPacketEntityAction) event.cancelEvent()
			"Old-Matrix" -> if (event.packet is C03PacketPlayer && mc.thePlayer.ticksExisted % 15 == 0) {
				try {
					val b = ByteArrayOutputStream()
	                val _out = DataOutputStream(b)
	                _out.writeUTF(mc.thePlayer.gameProfile.getName())
	                val buf = PacketBuffer(Unpooled.buffer())
	                buf.writeBytes(b.toByteArray())
	                mc.netHandler.addToSendQueue(C17PacketCustomPayload("matrix:geyser", buf))
				} catch (e: IOException) {

				}
			}
			"Kauri" -> if (event.packet is C0FPacketConfirmTransaction) event.cancelEvent()
			"Riding-Spoof" -> if (event.packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak))
			"Basic" -> if (event.packet is C0FPacketConfirmTransaction || event.packet is C00PacketKeepAlive) event.cancelEvent()
			"Old-Ghostly" -> {
				if (event.packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput())
				if (event.packet is C0FPacketConfirmTransaction || event.packet is C00PacketKeepAlive) event.cancelEvent()
			}
			"Spartan-Combat" -> {
				var packet = event.packet
        		if (packet is C00PacketKeepAlive && (keepAlives.size <= 0 || packet != keepAlives.get(keepAlives.size - 1))) {
            		keepAlives.add(packet)
            		event.cancelEvent()
        		}
        		if (packet is C0FPacketConfirmTransaction && (transactions.size <= 0 || packet != transactions.get(transactions.size - 1))) {
            		transactions.add(packet)
            		event.cancelEvent()
        		}
			}
			":trole:" -> {
				if (event.packet is C03PacketPlayer) {
					val c03 = event.packet as C03PacketPlayer
					c03.onGround = false
				}
				if (event.packet is C13PacketPlayerAbilities) {
					val c13 = event.packet as C13PacketPlayerAbilities
					c13.setFlying(true)
					c13.setInvulnerable(true)
				}
			}
		}
	}

	@EventTarget
	fun onUpdate(event: UpdateEvent) {
		if (modeValue.get().equals("area51", true)) mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(BlockPos(Double.NaN, Double.NaN, Double.NaN), 1, null, 0F, 0F, 0F))
		if (modeValue.get().equals("spartan-combat") && keepAlives.size > 0 && transactions.size > 0) {
			if (msTimer.hasTimePassed(3000L)) {
				mc.netHandler.addToSendQueue(keepAlives.get(keepAlives.size - 1))
				mc.netHandler.addToSendQueue(transactions.get(transactions.size - 1))
				keepAlives.clear()
				transactions.clear()
				msTimer.reset()
			}
		}
	}
}