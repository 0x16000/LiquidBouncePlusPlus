package net.ccbluex.liquidbounce.packexploitfix.hook;

import net.ccbluex.liquidbounce.LiquidBounce;
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.util.ChatComponentText;

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

public class NetHandlerPlayClientHook {

    public static boolean validateResourcePackUrl(NetHandlerPlayClient client, String url, String hash) {
        try {
            URI uri = new URI(url);
            String scheme = uri.getScheme();
            boolean isLevelProtocol = "level".equals(scheme);

            if (!"http".equals(scheme) && !"https".equals(scheme) && !isLevelProtocol) {
                client.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(hash, C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                throw new URISyntaxException(url, "Wrong protocol");
            }

            url = URLDecoder.decode(url.substring("level://".length()), StandardCharsets.UTF_8.toString());

            if (isLevelProtocol && (url.contains("..") || !url.endsWith("/resources.zip"))) {
                System.out.println("Malicious server tried to access " + url);
                EntityPlayerSP player = Minecraft.getMinecraft().thePlayer;

                if (player != null) {
                    player.addChatMessage(new ChatComponentText("§8[§9§lLiquidBounce+§8] §c§lThe current server has attempted to be malicious but we have stopped them."));
                    player.addChatMessage(new ChatComponentText("§8[§9§lLiquidBounce+§8] §fDirectory: " + url));

                    LiquidBounce.hud.addNotification(new Notification("The current server has attempted to trigger a file exploit!", Notification.Type.WARNING));
                }

                throw new URISyntaxException(url, "Invalid levelstorage resourcepack path");
            }

            return true;
        } catch (URISyntaxException e) {
            return false;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        return false;
    }
}